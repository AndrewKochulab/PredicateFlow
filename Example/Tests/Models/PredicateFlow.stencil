import PredicateFlow

{% for type in types.implementing.PredicateSchema %}
{{ type.accessLevel }} struct {{ type.name }}Schema: GeneratedPredicateSchema {
    private var compoundFieldBuilder: CompoundFieldBuilder

    {{ type.accessLevel }} init(compoundFieldBuilder: CompoundFieldBuilder) {
        self.compoundFieldBuilder = compoundFieldBuilder
    }

    {{ type.accessLevel }} static var entityName: String { return "{{ type.name }}" }

{% for variable in type.instanceVariables %}
{% if variable.isArray and variable.typeName.array.elementType.implements.PredicateSchema %}
    {{ type.accessLevel }} var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}Schema> { return CollectionProperty<{{ variable.typeName.array.elementTypeName }}Schema>("{{ variable.name }}", compoundFieldBuilder) }
    {{ type.accessLevel }} static var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}Schema> { return {{ type.name }}Schema().{{ variable.name }} }
{% elif variable.isArray %}
    {{ type.accessLevel }} var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}> { return CollectionProperty<{{ variable.typeName.array.elementTypeName }}>("{{ variable.name }}", compoundFieldBuilder) }
    {{ type.accessLevel }} static var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}> { return {{ type.name }}Schema().{{ variable.name }} }
{% elif variable.type.implements.PredicateSchema %}
    {{ type.accessLevel }} var {{ variable.name }}: ObjectProperty<{{ variable.type.name }}Schema> { return ObjectProperty<{{ variable.type.name }}Schema>("{{ variable.name }}", compoundFieldBuilder) }
    {{ type.accessLevel }} static var {{ variable.name }}: ObjectProperty<{{ variable.type.name }}Schema> { return {{ type.name }}Schema().{{ variable.name }} }
{% else %}
    {{ type.accessLevel }} var {{ variable.name }}: PredicateProperty<{{ variable.type.name }}> { return PredicateProperty<{{ variable.type.name }}>("{{ variable.name }}", compoundFieldBuilder) }
    {{ type.accessLevel }} static var {{ variable.name }}: PredicateProperty<{{ variable.type.name }}> { return {{ type.name }}Schema().{{ variable.name }} }
{% endif %}
{% endfor %}
}

{% endfor %}

{% block name %}
    
{% endblock %}