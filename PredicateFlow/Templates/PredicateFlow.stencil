import PredicateFlow

{% for type in types.implementing.PredicateSchema %}
/// The "{{ type.name }}" Predicate Schema
{{ type.accessLevel }} struct {{ type.name }}Schema: GeneratedPredicateSchema {
    
    /// USE THIS ONLY TO ADD A PREDICATEPROPERTY MANUALLY THROUGH EXTENSION!
    {{ type.accessLevel }} private(set) var compoundFieldBuilder: CompoundFieldBuilder

    /// DO NOT USE THIS INIT DIRECTLY!
    {{ type.accessLevel }} init(compoundFieldBuilder: CompoundFieldBuilder) {
        self.compoundFieldBuilder = compoundFieldBuilder
    }

    /// The class/struct name
    {{ type.accessLevel }} static let entityName = "{{ type.name }}"

{% for variable in type.storedVariables %}
{% if variable.isArray %}
{% if variable.typeName.array.elementType.implements.PredicateSchema %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}Schema> { 
        return CollectionProperty<{{ variable.typeName.array.elementTypeName }}Schema>("{{ variable.name }}", compoundFieldBuilder) 
    }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}Schema> { 
        return {{ type.name }}Schema().{{ variable.name }} 
    }
{% else %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}> { 
        return CollectionProperty<{{ variable.typeName.array.elementTypeName }}>("{{ variable.name }}", compoundFieldBuilder)
    }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: CollectionProperty<{{ variable.typeName.array.elementTypeName }}> {
        return {{ type.name }}Schema().{{ variable.name }} 
    }
{% endif %}
{% elif variable.type.implements.PredicateSchema %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: ObjectProperty<{{ variable.type.name }}Schema> { 
        return ObjectProperty<{{ variable.type.name }}Schema>("{{ variable.name }}", compoundFieldBuilder) 
    }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: ObjectProperty<{{ variable.type.name }}Schema> { 
        return {{ type.name }}Schema().{{ variable.name }} 
    }
{% elif variable.type != nil %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: PredicateProperty<{{ variable.type.name }}> { 
        return PredicateProperty<{{ variable.type.name }}>("{{ variable.name }}", compoundFieldBuilder) 
    }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: PredicateProperty<{{ variable.type.name }}> { 
        return {{ type.name }}Schema().{{ variable.name }} 
    }
{% elif variable.unwrappedTypeName == "Bool" %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: BoolPredicateProperty { 
        return BoolPredicateProperty("{{ variable.name }}", compoundFieldBuilder) 
    }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: BoolPredicateProperty { 
        return {{ type.name }}Schema().{{ variable.name }} 
    }
{% elif variable.unwrappedTypeName == "Int" or variable.unwrappedTypeName == "Float" or variable.unwrappedTypeName == "Double" or variable.unwrappedTypeName == "Date" or variable.unwrappedTypeName == "String" or variable.unwrappedTypeName == "UInt" or variable.unwrappedTypeName == "Int8" or variable.unwrappedTypeName == "UInt8" or variable.unwrappedTypeName == "Int16" or variable.unwrappedTypeName == "UInt16" or variable.unwrappedTypeName == "Int32" or variable.unwrappedTypeName == "UInt32" or variable.unwrappedTypeName == "Int64" or variable.unwrappedTypeName == "UInt64" %}
    /// "{{ variable.name }}" property
    {{ type.accessLevel }} var {{ variable.name }}: PredicateProperty<{{ variable.unwrappedTypeName }}> { 
        return PredicateProperty<{{ variable.unwrappedTypeName }}>("{{ variable.name }}", compoundFieldBuilder) 
    }
    /// "{{ variable.name }}" property for static access
    {{ type.accessLevel }} static var {{ variable.name }}: PredicateProperty<{{ variable.unwrappedTypeName }}> { 
        return {{ type.name }}Schema().{{ variable.name }} 
    }
{% else %}
    // ‚ùó Error generating PredicateProperty for "{{ variable.name }}" [type: {{ variable.unwrappedTypeName }}]
{% endif %}
{% endfor %}
}
{% endfor %}
